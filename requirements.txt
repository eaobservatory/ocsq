JCMT OMP Queue requirements
===========================

[The queue task]

- The observer will no longer interact with the SCUBA queue via ODFs
directly. Via the OT or (with canned non-science target observations) a pull
down menu.

- A engineering interface will support the ability to load an ODF/MACRO
directly from disk.

- Since the observer no longer has direct access to the live ODFs, the queue
will no longer remove entries that have been sent to SCUBA. A highlighter will
indicate the current active entry. This will allow the observer to re-observe
and ODF if, for example, a fault occurred.

- The queue must be able to accept MACROS or single ODFs (since that is what
the translator generates at the moment). 

- Boring ASIDE: In principal it should be able to accept an ODF in the form of
an SDS structure or XML string. This would allow the translator to return an
XML representation of the entire entry which can be passed from the QT
directly to the queue without appearing on disk. [loadORAC equivalent would be
a bottle neck equivalent to the old todd in this respect]. Again, in principal
we only need to actually write an ODF to disk just before it is sent to SCUBA
(this will happen anyway since the odf will be tweaked internally anyway
as happens for the current queue)

- Simple validation of the ODF must be performed and exception raised if ODF
can not be observed (final arbiter is, of course, SCUBA itself - I'm not
going to do a full validation).

- The stringified form of the queue entries should be descriptive.
eg:

  1  POINTING: 3C273 850      3int
  2  MAP:      TwHya 450/850  10int
  3  MAP:      TwHya 350/750  10int
  4. POINTING: TBD

- The queue should be able to determine whether the ODF that is 
about to be sent to SCUCD needs more information. Specifically:

   = missing target (only allowed for FOCUS, POINTING and CALIBRATOR
   observations)

   = missing sample_pa for scanning

   = Azimuth of skydip

The former will require observer/TSS input. The latter two will simply be
calculated on the fly either from the supplied target information (for scan)
or from the next valid science target (for skydip).

- The queue is therefore a post-translator itself.

- Question: Should the user have an ability to apply a target choice
to multiple queue entries at once? Should they be able to choose targets
for any odfs that are TBD or just the one that is "current"?


- If the queue needs more information a STATE parameter must be set containing
the type of information requested and additional useful information.
eg for target:

    REQUEST:    TARGET
    MODE:       POINTING | FOCUS | MAP | PHOTOM
    WAVELENGTH: 850 
    AZ:         234
    EL:         45

where AZ and EL are the azimuth and elevation of the next entry
(well, the next entry that includes a target). EL = -1 if none
of the entries include targets. The actual ODF must also be made available.

- When the final ODF on the queue is completed (or sent?) the doneMSB
should trigger. If loadq becomes the equivalent of "addback" we will need
to keep track of the load boundaries and trigger doneMSB at a boundary.
Should the queue present a popup if another MSB is loaded before the doneMSB
has triggered? [asking the person to "accept" the trigger]

- ISSUE: How can the queue trigger "doneMSB" if the MSB contains more than
one instrument? This is a problem since the ACSIS queue is distinct from the
SCUBA queue.


[the queue GUI/clients]

- Multiple GUIs (clients) can monitor a single queue

- The GUI can also monitor the instrument and telescope

- The queue gui should have an ability to:

  = stop and start the queue (controls whether the next entry is sent
  automatically when the previous entry completes).

  = determine when a POINTING observations is waiting for ACCEPT or REFUSE and
  send the correct response to SCUCD (removing the request widget from 
  each cloned GUI even if the button was never pressed)

  = Allow users to edit odfs that are on the queue. [by fetching it,
  editing it and inserting at the same position]

  = Allow pre-canned odfs to be inserted into the queue at the highlighted
  position (for skydips, focuses and pointings)

  = Determine whether the queue is waiting for more information to be added to
  an ODF and provide that information. Initial support will be for
  REQUEST=TARGET. This will pop up a list of pointing targets (for POINTING
  and FOCUS) or secondary calibrators (for MAP and PHOTOM) that are in the
  same quadrant (maybe even with a plot showing relative postions) sorted by
  distance from the reference AZ/EL. [All clients will respond in the same way
  - care should be taken to prevent race conditions]. Probably should have
  as default the previous target selection.



[IMPLEMENTATION]


Queue consists of:

   - Contents
        - array of queue "entries"

   - Some idea of the system receiving the queue entries

   - knowledge of whether the queue is running or stopped (in the sense
     of whether additional items will be sent to the backend),
     whether an entry is currently being observed and which entry on the
     queue is being observed.

   - Queue reads and writes entries on demand.

Entries:

   - entries have all the knowledge

      - is the "ODF" fully-specified (ie more information required)

      - if it is not fully-specified which information is required?

      - should extra information be calculated when the entry is sent
        for observation

      - what is the stringified form of the entry

      - This is really a SCUBA::ODF class attached to a Queue::Entry::SCUBAODF
        object

      - takes SCUBA::ODF object in constructor and converts it to
        Queue::Entry::SCUBAODF

SCUBA::ODF

   - knows how to read an ODF/macro and convert it into a
     SCUBA::ODF

   - Macros? - arrays of SCUBA::ODF objects

   - Need a constructor that will be able to return a SCUBA::ODF
     or SCUBA::ODFs depending on the argument.

   - Translator generates SCUBA::ODF or SCUBA::ODFs

   - Knows how to write.

   - ISSUE: Waveplate angles are generated by translator and written
     into separate file. Presumably a SCUBA::ODF object should not
     attempt to translate file arguments within the ODF into actual
     content (eg jiggle files) since the files will not necessarily
     be visible to the class [vax locations]. This implies that the
     translator must write waveplate information to disk and only
     store the filename in the ODF object [currently an array is stored
     during translation]

   - ODF must be an array of entries rather than a hash in order
     to retain comments (this is essentially Astro::FITS::Header)
       [only important if we dont care about existing comments
        and dont want to use order to indicate anything important.
        What about processor directives? Do we have processor directives?

   - Knows how to calculate some things if they are missing

   - Must be able to accept an Astro::Coords object to specify full
     target details.

   - Must be able to accept a SCUBA::ODF object when fixing up the
   current ODF. This will allow a skydip to have the azimuth of a
   following observation. Somehow the next available ODF with target
   must be supplied.


SCUBA::ODFs

   - Collection of SCUBA::ODF objects.

   - has "writeodf" method that will write all constituent odfs
     and macro file

Astro::Coords

   - Must have an ability to label a coordinate with a target name.
     This will allow a pointing catalogue to be represented as an
     array of Astro::Coords objects.


   - Should be able to recognizea SCUBA::ODF in the constructor
     for Astro::Coords. Will require an additional class that can interpolate
     apparent RA/Dec from MJD1 and MJD2.

        Astro::Coords::Interpolated ???



------------------------------------------------------------------------------


Data flow:

  - Add ODFs onto queue from QT (via ditscmd?)

         Result: Queue must have LOADQ action that accepts a file name
                 that can either be a single ODF or file of ODFs

  - If queue is running start sending ODFs to SCUCD

  - When an ODF is prepared for sending it must first be verified.
    If it is okay it is written to disk and sent to the SCUCD

    - If the ODF is to be modified we can't modify the actual ODF
    entry since the next time we send it (if we resend it) it will
    probably need to be recalculated. This suggests we need to
    write the copy to disk. A Queue::Entry object will probably need
    to keep track of two SCUBA::ODF objects.

    - If the ODF is missing a sample_pa and the scan area is not
    square the sample_pa must be calculated to be optimum direction.

    - If the ODF is a scan map and is square the SAMPLE_PA must be
    cycled through the normal allowed values. It makes sense for this
    to be an attribute of the SCUCD Queue - cycling through them
    automatically as the night progresses.

    - If the ODF is a skydip, the next ODF that has a target must be
    located such that the AZimuth can be correctly set to the azimuth
    of that target.

    - When "beam control" becomes an issue the queue should insert
    a parameter controlling whether the telescope can be moved or not.

    - If the ODF is missing a target (and requires one) then the queue
    must be paused, the next observation that does have a target must
    be obtained, the az and el obtained from it and that information
    published in a parameter. The user must then retrieve the ODF
    (which will be the current index), publish a list of nearby
    pointing targets or calibrators (depending on mode), allow the observer
    to select a source and then insert the ODF back into the queue.

      Requires: OVERWRITE action

      Must protect against two people trying to overwrite at the same
      time. Suggests that the over writable index has a state that
      is twiddled when it has been overwritten or the index has been
      updated.

    - Messages from SCUCD are passed back to the Backend object which
      in turn puts them in a parameter. Messages are stored in the backend
      object until the queue is polled for activity (this is a limitation
      of the design that can support none event driven architectures). This
      means that the rescheduling action must happen fairly often and that
      for each poll *ALL* messages are dumped into a parameter. This
      will lead to updates of informational messsages in discrete lumps
      rather than as a continous flow as they are generated.

    - When the observation has completed (ie the action is complete)
    the ODF can be removed from disk and the next observation can be
    retrieved and we start again. If we have reached the end of the
    queue the queue is stopped and the high lighter is moved back up
    to the start. Additionally we trigger the doneMSB at this
    point. This is fine for SCUBA but what happens if we are queueing
    ACSIS as well?

